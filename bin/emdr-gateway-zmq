#!/usr/bin/env python
"""
ZeroMQ gateway application.
"""
from logging.config import dictConfig
import argparse
from emdr.conf import default_settings as settings
from emdr.core.command_utils import set_logger_level, print_cmd_header, print_cmd_footer

parser = argparse.ArgumentParser(
    description="This gateway accepts market data over ZeroMQ.",
)
parser.add_argument(
    '--listener', action='append', dest='listeners',
    help="Overrides default gateway receiver bindings. This determines how "\
         "the outside sources connect to this gateway to PUSH messages.")
parser.add_argument(
    '--sender', action='append', dest='senders',
    help="Overrides default gateway sender bindings. This determines where " \
         "the gateway sends its messages, typically an Announcer.")
parser.add_argument(
    '--loglevel', action='store', dest='loglevel', default='INFO',
    help="Overrides default logger level (DEBUG, INFO, WARNING, ERROR) "
         "(default: %s)" % settings.LOGGING['loggers']['']['level'])
parser.add_argument(
    '--workers', action='store', dest='workers',
    help="Overrides default worker count "
         "(default: %s)" % settings.GATEWAY_ZMQ_NUM_WORKERS)

parsed = parser.parse_args()

print_cmd_header('emdr-gateway-zmq')

if parsed.listeners:
    settings.GATEWAY_ZMQ_RECEIVER_BINDINGS = parsed.listeners
if parsed.senders:
    settings.GATEWAY_ZMQ_SENDER_BINDINGS = parsed.senders
if parsed.workers:
    settings.GATEWAY_ZMQ_NUM_WORKERS = int(parsed.workers)

set_logger_level(parsed.loglevel)
print("* Logging level: %s" % parsed.loglevel)

print("* Worker count: %s" % settings.GATEWAY_ZMQ_NUM_WORKERS)

print("* Accepting PUB connections on:")
for binding in settings.GATEWAY_ZMQ_RECEIVER_BINDINGS:
    print("  - %s" % binding)

print("* Sending market data over PUB to Announcers:")
for binding in settings.GATEWAY_ZMQ_SENDER_BINDINGS:
    print("  - %s" % binding)

print_cmd_footer()

dictConfig(settings.LOGGING)

from emdr.daemons.gateway_zmq import main
# Get the ZMQ gateway running.
try:
    main.run()
except KeyboardInterrupt:
    print('Gateway stopped by keyboard interrupt.')
